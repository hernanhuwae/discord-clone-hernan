// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String    @id @default(uuid())
  userId   String    @unique
  name     String
  email    String    @db.Text
  imageUrl String    @db.Text
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  server   Server[]
  member   Member[]
  channel  Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String    @db.Text
  inviteCode String    @unique
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Member     Member[]
  Channel    Channel[]
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id           String         @id @default(uuid())
  role         MemberRole     @default(GUEST)
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  profileId    String
  serverId     String
  profile      Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server       Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  Message      Message[]
  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived Conversation[] @relation("MemberTwo")
}

enum ChannelType {
  AUDIO
  TEXT
  VIDEO
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  serverId  String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  Message   Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  deleted   Boolean  @default(false)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  memberId  String
  channelId String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String @id @default(uuid())
  memberOneId String
  memberTwoId String
  memberOne   Member @relation("MemberOne",fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo   Member @relation("MemberTwo",fields: [memberTwoId], references: [id], onDelete: Cascade)
  privateMessage PrivateMessage[]
}

model PrivateMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String @db.Text
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
